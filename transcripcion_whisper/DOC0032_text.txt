 Hola a todos, continuando con la serie de videos del curso teórico del IOT, en este video vamos a hablar sobre HTTP. Bien, como ya explicamos en anteriores videos, a través de internet, nosotros podemos unir nuestro dispositivo IOT como un servidor. Este servidor puede estar en nuestra red LAN o instalada en la nube. Pero para enviar y recibir datos, necesitamos usar otro protocolo. Los protocolos más populares para este objetivo son el HTTP, y el MQTT. El MQTT lo explicaremos en otro video. Ahora nos vamos a enfocar en el HTTP. El protocolo HTTP es muy común no solo en el IOT. Básicamente con el HTTP se ha construido toda la web. De hecho, la explicación que te presentaré en este video se puede aplicar para cualquier caso en el que uses el protocolo HTTP. Bien, la ventaja de usar este protocolo es que es altamente masificado, tiene mucho soporte entre los lenguajes de programación y es sencillo utilizar este protocolo para mandar datos de los sensores. En la guía de fundamentos de redes, te explicamos que era el modelo TCP y P. Este modelo se divide en capas. Para describir mejor cada capa, se utiliza el modelo OSI. El protocolo HTTP pertenece a la capa de aplicación del modelo TCP y P. Otra característica es, por ejemplo, puede haber un cliente como una computadora que quiere transmitir información a un servidor. Para que suceda eso, con este protocolo, el cliente realiza una conexión y después una petición HTTP. Como consecuencia, el servidor manda una respuesta HTTP. Por eso se dice que HTTP está basado en un esquema de petición respuesta. Además, HTTP está constituido por mensajes tipo texto plano. Esto tiene la ventaja de que es legible y fácil de depurar, pero su desventaja es que los mensajes son más largos. El mensaje HTTP está compuesto de tres partes, la línea inicial o de estado, la cabecera y el cuerpo. La línea de estado indica qué hacer si es un mensaje de petición o qué ha ocurrido si es un mensaje de respuesta. La cabecera del mensaje contiene los atributos del mensaje. Esta es la unidad fundamental de la comunicación HTTP. En este bloque se dan las condiciones para la conexión con el server. Esta cabecera se termina con una línea en blanco. Y la última parte es el cuerpo del mensaje que puede ser opcional. Su presencia depende de la petición y del resultado. Otra característica es que HTTP es un protocolo sin manejo de estados. Después de que el servidor manda la respuesta, cierra la conexión. Es por eso que se suelen utilizar las cookies para guardar información como contraseñas, correos, etc. Estas cookies están listas para ser usadas cuando se establezca otra conexión con el servidor. Bien, entonces, ¿cómo solicitamos información mediante este protocolo? Eso lo hacemos a través de las urls. Estas urls están compuestas por el protocolo que se utiliza, el nombre del servidor y el camino o la ruta del recurso que queremos utilizar. El puerto que se utiliza para establecer una comunicación HTTP con el servidor es el puerto 80. Los puertos son como canales en las cuales el servidor está prestando algún servicio. Bien, ahora vamos a explicar los llamados métodos de comunicación HTTP. Los dos métodos más usados son los métodos GET y métodos POST. Estos los podemos usar para indicar una petición o respuesta. En cuanto a su uso, los métodos GET son empleados para solicitar o mandar información al servidor, y el método POST se utiliza para mandar información al servidor, pero dentro del cuerpo del mensaje. El método POST se usa, por ejemplo, para rellenar formularios. Entonces, ya conociendo esto, vamos a describir el funcionamiento de la comunicación HTTP. Supongamos que un cliente quiere entrar a este link. Primero, el cliente HTTP inicia una conexión TCP al servidor HTTP llamado educatronicos.blogspot.com. Por defecto, el puerto que se utiliza es el 80. Después, el servidor HTTP, que se encuentra escuchando por el puerto 80, acepta la conexión y se lo notifica al cliente. Seguidamente, el cliente HTTP manda un mensaje de petición GET dentro de la conexión TCP abierta a la página, que son los sistemas embebidos.html. Luego, el servidor HTTP recibe el mensaje de petición y crea un mensaje de respuesta incluyendo el texto HTML de la página solicitada. Después, el servidor HTTP cierra la conexión TCP. Y por último, el cliente recibe el mensaje y presenta la página web. Bueno, eso sería todo por este video. Para que esta explicación teórica quede más clara, próximamente sacaremos un video donde usaremos el protocolo HTTP para transmitir datos desde el SP32 a Nolred. Además, en el próximo video hablaremos del protocolo MQTT. No olvides dejar un like y suscribirte si este video te fue de ayuda. Gracias.
