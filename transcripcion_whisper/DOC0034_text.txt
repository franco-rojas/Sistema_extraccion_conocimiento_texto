 Hola a todos, continuando con la serie de videos del curso teórico del IoT, en este video vamos a hablar sobre la sintaxis JSON. Esta sintaxis va a estar muy presente en las programaciones de las soluciones IoT que hagamos. Además es muy usada entre los programadores de distintos lenguajes, así que esta explicación también es válida si quieres aplicarlo en otra área que no sea el internet de las cosas. Aparte de los protocolos de comunicación de los que ya hablamos, es importante conocer la sintaxis de transferencia de información. Actualmente la sintaxis que está más estandarizada en el IoT es la sintaxis JSON. Gracias a esto podemos aplicar un formato común para estructuras complejas. Entre sus ventajas encontramos que JSON es un formato de texto sencillo para intercambiar datos. También es ligero e independiente de cualquier lenguaje de programación. Además tiene forma de texto plano de simple lectura, escritura y generación. También ocupa menos espacio que el formato XML. XML es otro formato de texto que se utiliza para almacenar e intercambiar datos estructurados. Y además no es necesario que se construyan parsers personalizados. El parse se usa para evaluar si la sintaxis es correcta según el formato de la sintaxis JSON. Bien, en la siguiente imagen podemos ver un ejemplo de una sintaxis JSON. Como observamos, JSON se representa entre corchetes. Los corchetes indican que todo lo que está dentro es parte de un objeto. Y dentro de los objetos encontramos una clave con su respectivo valor. Si lo vemos de otra forma, la clave podría ser el nombre de una variable y su valor podría representar el contenido de esa variable. El tipo de dato de ese valor podría ser un string, un booleano, un carácter numérico, un array, etc. En JSON también se permite el anidamiento. Esto quiere decir que una clave puede contener como valor una sintaxis JSON. Y esos valores a su vez pueden contener otra sintaxis JSON. Bien, supongamos que el objeto se llame MSG y quiere obtener el valor de la clave type. Para hacer eso tenemos que colocar lo siguiente. Primero definimos una variable. Si estamos usando JavaScript, esa variable se define como var. La variable se llamará dato y esto será igual al nombre del objeto, en nuestro caso MSG, punto y el nombre de la clave, en nuestro caso type. De esa forma la variable dato contendrá el valor de la clave type. Ahora veamos otro ejemplo. Supongamos que quiero obtener el primer valor del array de la clave coordinates. Como podemos observar, coordinates está en una sintaxis JSON contenida dentro de otra sintaxis JSON. Entonces, para hacer esto hacemos lo siguiente. Declaramos una variable var llamada dato que será igual a MSG, punto, geometry, punto, coordinates. Abro corchetes y coloco el índice del valor del array, en nuestro caso el cero. De esa manera obtengo el primer valor del array de coordinates y lo guardo en la variable dato. Bien, si has visto los videos del curso de IoT con SP32 puedes notar que cuando usamos Node.RED todo se encuentra en formato JSON, desde los archivos que descargamos hasta los datos que intercambiamos y además esos datos tienen como nombre de objeto MSG. De hecho, para verificar esto en Node.RED podemos hacer lo siguiente. Le damos doble clic al dado de book, seleccionamos este combo box y le damos clic a esta opción. Ahora le damos clic a DOM, a deploy y clic en el cuadrado azul del nodo INJECT para mandar el mensaje. Como podemos notar, el mensaje es tipo JSON. Para ordenarlo mejor le damos clic al triángulo. Aquí observamos que el objeto se llama MSG. La primera clave es el tópico, la segunda el payload, la tercera el factor de calidad y así sucesivamente. Lo que hace el nodo de book es leer el payload o carga útil. Esto también lo podemos configurar. Para que el nodo de book lea, por ejemplo, el tópico hacemos lo siguiente. Como vemos, ahora se imprimió el nombre del tópico. Bien, siguiendo con la explicación, vamos a comparar un XML con un JSON. Como vemos, la sintaxis JSON es más compacta. Este puede ser parciado usando el método eval de JavaScript y además puede incluir a raíz. Por otra parte, XML utiliza etiquetas igual que HTML. También los nombres son más extensos y puede ser validado bajo un conjunto de reglas. Bien, los lenguajes que soportan JSON son JavaScript, C++, Java, PHP, Python, entre otros. En lenguaje JavaScript, para convertir un string a JSON, se debe colocar al final la función parseJSON. Como dijimos, el parse se usa para evaluar si la sintaxis es correcta según el formato de la sintaxis JSON y si lo es, lo convierte en un objeto. Dentro de Arduino hay una librería llamada ArduinoJSON que nos va a ser de mucha utilidad cuando programemos el SP32 para unirlo a una máquina virtual y aplicar soluciones de la Internet de las Cosas. El link de la documentación de esta librería te la dejaré en la descripción del video. Aquí se muestra el método de serialización y de serialización. Serializar sirve para generar información en un objeto JSON y de serializar es para poder recibir datos de un objeto JSON y extraer la información. Bien, si repasamos las características de la sintaxis JSON, podemos decir lo siguiente. Es independiente de un lenguaje específico, está basado en texto, es de formato ligero, fácil de parsear, no define funciones, no tiene estructuras invisibles, no tiene espacios de nombres, no tiene validator y si usamos HTTP, su MINDTYPE es Application JSON. MINDTYPE es la manera estándar de mandar contenido a través de la red. Bueno, eso sería todo por este video. Para que esta explicación teórica te quede más clara, puedes revisar el próximo video que vamos a sacar sobre Node-RED y SP32 comunicados por el protocolo MQTT usando la sintaxis JSON. No olvides dejar un like y suscribirte si este video te fue de ayuda. Gracias.
