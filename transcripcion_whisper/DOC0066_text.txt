 Muy buenas a todos y bienvenidos al nuevo curso de Open Webinars. Mi nombre es Ejelo Sada y vamos a ver en qué consiste un sistema distribuido. Lo primero de todo, ¿qué es un sistema distribuido? Es un conjunto de equipos independientes que actúan de una forma transparente como un único equipo. ¿Cuál sería el objetivo? Es descentralizar tanto el almacenamiento de la información como el procesamiento. Todo esto lo estamos viendo de cara a el actisil y cómo funciona. ¿Qué ventajas aporta? Pues mayor eficacia, mayor tolerancia a fallos porque al estar distribuida la información, en el caso de que se nos caiga un nodo, dicha información va a encontrarse en otros de replicada. Mayor velocidad a la hora de realizar un procesamiento, cuando se realiza una consulta, los procesamientos se dividen entre todos los nodos que forman el sistema distribuido, en vez de, por ejemplo, enviarlo a un único nodo y que él tenga que hacer todo el trabajo. Y escalabilidad, es decir, si mañana necesitamos más procesamiento o añadir más disco duro, en vez de que los equipos crezcan de forma vertical añadiendo más almacenamiento, más RAM o más CPU, se añaden equipos de forma horizontal, que se añadirían al cluster o al sistema distribuido. ¿Qué aporta una base de datos distribuida? Pues la información se almacenaría en diferentes sitios, en diferentes sitios de la red, físicamente, aunque lógicamente, de cara a un usuario al final, es una única base de datos. Cuando nosotros queramos acceder a la información, vamos a lanzar una consulta e internamente él ya sabrá dónde se ha almacenado cada uno de esos datos. Independencia con respecto al sistema operativo, es decir, si el servicio se puede instalar en sistema operativo Linux o Windows, da igual, la base de datos es de forma distribuida y es completamente transparente el sistema operativo para el usuario al final. La información se queda fragmentada y las réplicas aportan alta disponibilidad. A continuación vamos a ver un vídeo, una especie de animación, en la que vamos a ver cómo se distribuye en el act-tc esta información distribuida. Suponemos que disponemos de un cluster distribuido del act-tc que está compuesto por tres nodos. Entonces nosotros tenemos a través de una entrada de datos toda la información que vamos a obtener. El act-tc paquetiza la información y la llama, la denomina shard. Entonces lo que va a hacer es, este shard que va generando, lo va a ir distribuyendo entre los distintos nodos. Pues por ejemplo, el primer shard lo va a colocar aquí y para conseguir el alta disponibilidad que comentábamos antes, que es una de las ventajas de un sistema distribuido, vamos a establecer que las réplicas sean de esta forma. Cuando yo indexo la información se crea una réplica en un nodo distinto. Muy importante esto, nunca se deba crear en el mismo nodo, ya que si tengo el shard primario y la réplica en el mismo nodo y este se cae, perdería esa información. Por tanto las réplicas se van a ir creando en nodo distinto a lo cual le va entrando la información. Pues como se puede ver, van entrando los shards, los paquetes y se van generando réplicas en nodo distinto. ¿Qué ganamos con esto? Que si mañana por ejemplo ocurre un error y perdemos esta información, no pasa nada. ¿Por qué? Porque el 1 primario tiene una réplica en este nodo, el 2 réplica tiene la primaria aquí y efectivamente todos tienen una réplica o el primario en otro nodo distinto. Entonces, ¿qué es lo que haría en este caso las T-Shards? Se percata de que hemos perdido un nodo y hasta que este nodo se recupere, lo que va a hacer es sabiendo que en ese nodo estaba esa información, voy a replicarla pues si yo tenía aquí el 1 primario y ahora tengo aquí la réplica del 1, voy a poner el 1 primario aquí. De esa forma voy a ir cogiendo todos los shards que había perdido y voy a seguir cumpliendo que la réplica siempre sea 1. De esta forma todos los shards que estaban asignados a este nodo lo he recolocado en los otros nodos y así no perdemos la información. Es una de las ventajas y creo que es la mejor ventaja del sistema distribuido hablando de base de datos, no de procesamiento. Entonces, este conjunto de nodos lo que forma es lo que nosotros llamamos un cluster. El acti-sheet, cuando nosotros tenemos una instancia de acti-sheet instalada, un servicio en un nodo, en un equipo se denomina nodo y un conjunto de nodos del acti-sheet forman un cluster. Cada nodo se encarga de peticiones HTTP y dispone de una resapi para contestar las peticiones que se le vayan realizando. Los nodos conocen el estado del resto y pueden reenviar las peticiones de los clientes al nodo indicado. Entonces ahora vamos a entender mejor este concepto cuando veamos qué tipo de nodo existe. Disponemos de el masternode, que es uno de los fundamentales que se dedica a crear y a borrar los índices. Cuando nosotros hablamos de índices en el acti-sheet nos referimos a base de datos. Entonces nosotros el masternode será el que cree, el que borre los índices, gestiona los nodos conectados, toma decisiones de colocación de datos. Cuando nosotros queremos indexar información en el acti-sheet, esa información llega al master y será el master el que diga este share va hacia allí, este share va a este nodo y estos datos van a este nodo. A ver que las reparte. De la misma forma cuando realizamos la búsqueda le preguntaremos al master dónde realizar la búsqueda de un determinado índice, de una determinada base de datos y será el master el que nos diga dónde podemos consultar cada información. Los datanodes su objetivo es almacenar la información y también procesarla. Cuando nosotros realizamos una consulta no es simplemente devuelven esta información. Podemos hacerle consulta más compleja en el que hagamos por ejemplo agregación. Por ejemplo si tenemos clientes y lo que nos debe cliente, lo que nos debe nosotros vamos insertando esos datos, podemos consultarle que nos devuelva del cliente x todo lo que nos debe. Entonces tiene que realizar una suma. Es un ejemplo muy básico pero es un procesamiento que tiene que utilizar también los datanodes. Por lo tanto se utilizan tanto para almacenar información como para procesarla. Injustnodes ejecutan una especie de preprocesamiento. El preprocesamiento que hablábamos antes de loctas. Pues si no requerimos tener un loctas instalado en una máquina y el preprocesamiento muy básico podemos hacerlo con un Injustnode que también va en el mismo nodo que el Elasticseed y lo que hace es recoger la información, aplicarle una serie de campos con unos filtros y pasárselo al masternode para que pueda realizar el indexado de dichas notas. Y el último de los nodos que es el que más quería destacar es el nodo coordinador. Lo que hace es encaminar la petición. Es un nodo que se instala en el cliente como en este caso por ejemplo nosotros utilizaremos Kibana y Kibana cuando realice las peticiones al Elasticseed lo que haría si no utiliza un nodo coordinador es preguntarle al master. Oye, ¿dónde puedo buscar esta información? ¿Qué pasa? Que si nosotros tenemos un cluster sobrecargado porque el master se dedica a hacer muchas tareas podemos sobrecargar un master cluster. Entonces el nodo coordinador lo que hace es mantener una comunicación constante con el master actualizándose toda la información que el master sabe gracias al nodo coordinador. De esta forma si nosotros con Kibana en vez de conectarlo directamente al master se conecta a uno coordinador, el coordinador cuando haya que buscar cierta información no le va a preguntar al master ya que conoce lo mismo que conoce el master sino que ya sabe dónde hay que buscarlo. Es una forma de evitar sobrecargar más el cluster a través del master y poder hacer las consultas con la información que conoce el nodo coordinador. Además de saber dónde escribir y dónde leer puede ayudar a la parte de procesamiento de datos. Es decir, lo que sería un bus reduce que se ve mucho en el procesamiento escalado de data es cuando yo hago una consulta, como se puede ver aquí, se enviaría dicha consulta a los data nodes los cuales van a hacer la búsqueda y una especie de preprocesamiento pero claro yo quiero obtener un único resultado de una única consulta. Si tengo tres data nodes no quiero obtener tres resultados. Vale, entonces lo que se hace es que los data nodes realizan ese procesamiento que les vamos a llamar una especie de mapeo y ese preprocesamiento una vez han terminado se lo envían al nodo coordinador el cual hace una especie de mergue de unión de los resultados tenido de todos los nodos y es el que presenta el resultado final aquí van a de esta forma ganamos velocidad y nos sobrecargamos el clases y bueno con todo esto terminamos este tema si está interesado tenemos en Open Webinars un curso de ELK.
