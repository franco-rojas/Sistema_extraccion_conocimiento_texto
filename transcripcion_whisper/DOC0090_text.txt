 Hola a todos y bienvenidos a Codificando Bits, el lugar donde aprenderán todo acerca de la Inteligencia Artificial, el Deep Learning y la ciencia de los datos. Les recuerdo que si quieren ver más detalles pueden visitar mi sitio web codificando bits.com Hoy vamos a hablar del algoritmo de la Regresión Logística. ¿En qué consiste este algoritmo? Simplemente es un modelo de aprendizaje que permite clasificar una serie de datos. En este caso tenemos el ejemplo de un emoji con un rostro feliz, entonces lo que permitiría hacer la Regresión Logística en este caso sería clasificar ese emoji correspondiente a la categoría feliz. Por su parte si es una carita triste pues simplemente permitiría clasificarlo como un rostro triste. Entonces la Regresión Logística permite realizar este tipo de clasificación cuando a la salida tenemos dos categorías. Por eso también esto se llama Regresión Binaria, porque las categorías son únicamente dos. Miremos un ejemplo un poco más concreto. Aquí les muestro una nube de puntos de color rojo y de color gris y cada punto se caracteriza por tener dos coordenadas x1 y x2. Eso también lo llamamos características, cada uno de esos puntos tiene dos características y cada uno de estos puntos pertenece a una categoría diferente. En rojo les estoy mostrando la categoría cero, en gris la categoría uno. ¿Qué es lo que hace en últimas el algoritmo de Regresión Logística? Separar esos datos, es decir clasificarlos. Aquí les muestro una línea que de forma aproximada permite separar una categoría de la otra, lo que está por encima de la línea de color verde es la categoría uno, lo que está por debajo es la categoría cero. Lo que hace el algoritmo de Regresión Logística es encontrar automáticamente esta línea o esta frontera de decisión como también se llama. ¿Cómo lo logra hacer el algoritmo de Regresión Logística? Ejecuta o lleva a cabo dos pasos sobre esos datos. Toma cada uno de esos puntos, que recordemos que tenía dos características x1 y x2, y los pondera inicialmente con un coeficiente w1 y w2, con una serie de coeficientes. Y a eso le suma un tercer coeficiente llamado b. Y con eso se obtiene un valor z, que es lo que estamos llamando aquí la transformación. ¿Cómo se calculan estos tres coeficientes w1, w2 y b? Se calculan a través del entrenamiento, que es lo que vamos a ver a continuación. Una vez transformados estos datos, lo que vamos a lograr es comenzar a separarlos, es decir el objetivo de esta transformación es comenzar a separarlos para poderlos clasificar posteriormente. Ahora, ¿cómo se hace en la clasificación final? Entonces se toma ese dato de la transformación y se lleva a algo que se conoce como una función de activación. Esa función de activación tiene en este caso una característica importante y es que como nos interesa tener a la salida dos categorías, uno o cero, esa función de activación tiene que ser en primer lugar no lineal y en segundo lugar entonces tiene que tener ese rango de valores a la salida, es decir tiene que arrojarnos o el uno o el cero dependiendo del valor de z. Aquí en la parte de abajo les muestro la función usada en este caso de la regresión logística que se conoce como función sigmoidal. Tiene una definición matemática en el post que les dejo en la información de este video, en la descripción del video podrán encontrar todos los detalles, pero la idea básica es que si z en el eje horizontal de esta función, si z que es la transformación tiene valores negativos la salida entonces de esa función sigmoidal va a tener un valor cero y si z tiene valores positivos pues esa salida de la función sigmoidal va a ser muy cercana a uno, esto lo que permite es hacer ese tipo de clasificación binaria. Estos dos elementos que acabo de mostrarles, la transformación y la función de activación se combinan en una unidad que en deep learning en inteligencia artificial se conoce como la neurona artificial, ¿por qué neurona? porque su funcionamiento, su principio de funcionamiento es muy similar al de las neuronas humanas. Tiene un dato de entrada o unos datos de entrada en este caso lo llamamos x que puede tener una, dos o n características, cada una de esas características se transforma, se obtiene entonces un valor z, una cantidad numérica z que es esa transformación que permite comenzar a separar los datos y luego se aplica la función de activación que define entonces si el dato corresponde a la categoría 1 o a la categoría 0, esencialmente entonces esto es lo que hace una neurona artificial, un proceso de transformación y luego aplica una función de activación. Cómo se realiza el entrenamiento, entonces yo les decía que en la transformación se calculan unos coeficientes W y B, ese entrenamiento se hace a través del algoritmo del gradiente descendente que vimos en un video anterior y ese gradiente descendente lo que permite es minimizar algo que se llama la función de error o la función de pérdida que compara la predicción que hace el modelo, o sea el valor y o la salida que genera con el valor que realmente o la categoría de la que realmente pertenece el dato de entrada, comparando esos dos valores se minimiza esa función de error y al minimizarlo estamos encontrando los coeficientes que permiten que el error sea mínimo precisamente. En la regresión lineal vista anteriormente en otro video hablábamos del error cuadrático medio era una forma de medir ese error, ¿qué ocurre en este caso? Como los datos son binarios, categoría 1, categoría 0, cuando se calcula el error cuadrático medio esa función puede tener no un solo mínimo absoluto sino que puede tener varios mínimos locales que son los puntos verdes que estoy mostrando acá. Idealmente nosotros querríamos llegar al mínimo absoluto que es el punto de color rojo pero como el algoritmo del gradiente descendente no sabe dónde está ese mínimo puede ser que al momento de inicializarlo y de ejecutar el algoritmo el algoritmo converja a alguno de los puntos verdes, es decir no al mínimo absoluto, lo cual querría decir que el entrenamiento no sería adecuado, por eso esta función no se usa, la del error cuadrático medio, por eso usamos la que se conoce como la entropía cruzada que en codificando bits.com explica un poco más en detalle esta entropía cruzada pero la idea es que al usar esta función de error vamos a tener entonces un único mínimo absoluto que es este punto de color rojo que estamos mostrando acá, con eso siempre vamos a garantizar que el gradiente descendente funciona correctamente durante el entrenamiento. Finalmente aquí les voy a mostrar un ejemplo en tiempo real del proceso de entrenamiento y cómo a través de cada iteración de ese proceso de entrenamiento en los datos que les mostraba anteriormente se va refinando esa frontera de decisión entre los dos tipos de datos, es importante recordar que esta frontera de decisión como ustedes ven es una línea recta, siempre cuando se usa una sola neurona como es el caso de la regresión logística siempre esa frontera de decisión va a ser lineal y eso tiene algunas desventajas dependiendo de cómo estén distribuidos los datos, a veces funcionará bien la clasificación a veces no tan bien. Bien, esto ha sido todo, gracias por haberme acompañado y no olviden suscribirse al canal y visitar mi sitio web codificando bits.com. Hasta luego.
