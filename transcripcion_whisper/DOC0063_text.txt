 es fastidiado escalar microservicios verdad? no todo eso que nos cuentan es luego tan fácil y desacoplar las aplicaciones desde el principio tampoco es una tarea sencilla de hecho hay muchos casos de uso en los que te seguirá surgiendo la duda de puedo realmente hacer un desacople total o realmente voy a necesitar alguna funcionalidad que esté centralizada bueno en todo eso hay algo que te puede ayudar y que puede colaborar en que tu aplicación y tu aplicación creada con microservicios sea mucho más flexible es Kafka y te lo voy a contar ahora Kafka es un proyecto de la fundación apache y básicamente con pocas palabras y permitirme que no sea del todo exacto pero para ello lo que estoy buscando es que se entienda mejor Kafka es simplemente un sistema que te permite hacer un stream de eventos y poder comunicar cosas que suceden en un microservicio productor a otros microservicios consumidores con ciertas particularidades si os acordáis de la temporada anterior cuando os empecé a hablar de cómo desacoplar tus programas con microservicios hacía mucho énfasis en una herramienta o en un protocolo que es mqtd y que a mí me parece que es muy muy interesante para aprender de cara a luego implementar Kafka los dos utilizan un sistema de publicación suscripción y ese sistema de publicación suscripción lo que permite es que haya microservicios que comunican información y se olvidan comunican a una red de esa información y se olvidan mientras que hay otros microservicios que a diferentes velocidades pueden recibir esa información y hacer algo con ella en el caso de mqtd eso no es del todo así en el caso de mqtd puedes es factible es posible que algunos mensajes se pierdan sin embargo en Kafka no tienes ese problema en Kafka los tópicos son persistidos durante un determinado tiempo obviamente no van a persistirse para siempre pero sí que es verdad que los microservicios consumidores pueden leer a diferentes velocidades lo cual es muy interesante técnicamente Kafka tiene tres conceptos básicos el tópico la partición y la replicación los tópicos de Kafka están organizados como si fuera un feed de noticias que van fluyendo de forma continua el productor o las aplicaciones productoras escriben datos en estos tópicos para que los consumidores aplicaciones consumidoras puedan recibir la información de forma organizada la información está organizada dentro de lo que se denominan registros o records y están dentro del cluster esperando a ser accedidos por parte de los consumidores Kafka retiene en sus ficheros de log que realmente es donde finalmente está la información almacenada toda la información que ha sido publicada durante un determinado periodo de retención la posición de lectura de un determinado consumidor en el log es importante porque desde ese punto de lectura hacia las nuevas escrituras existe lo que se denomina un offset ese offset es un elemento que se puede ir avanzando bien de forma automática o bien de forma individualizada o bajo selección para poder acceder a un determinado registro de información las particiones son secuencias que no se pueden no se pueden cambiar y que están divididas están organizadas de tal forma que diferentes consumidores puedan acceder a la información de Kafka con la intención de que puedan leer a diferentes velocidades por otra parte Kafka y un determinado tópico puede tener muchas particiones múltiples particiones esto permite que puedan ser accedidos los tópicos en paralelo por diferentes consumidores y que cada consumidor lea y haga lo que necesite a su propia velocidad finalmente y en relación con el concepto de replicación de Kafka es necesario mencionar que la replicación sucede al nivel de la partición la replicación al final no es ni más ni menos que una redundancia sobre la información que ya tiene Kafka por así decirlo cada partición o réplica tiene un servidor que actúa como líder y tiene otro servidor que actúa como seguidores eso tiene más que ver con lo que os decía al principio de que Kafka necesita a su equipo y como service discovery pues para poder poner en comunicación a diferentes instancias de Kafka el líder de una determinada réplica es el que se encarga de todas las solicitudes de lectura y escritura mientras que los demás seguidores lo único que hacen es replicar la información que hace el líder o que o que escribe o lee el líder si el líder falla cualquiera de los seguidores pues puede tomar la función de líder y cuando el líder vuelve pues la carga se vuelve a distribuir muchos proyectos a día de hoy sobre todo en entorno cloud están desacoplados mediante sistemas de colas o sistemas de mensajería o simplemente por mencionar algo Kafka no es un requisito imprescindible yo he hecho proyectos en los que en lugar de utilizar Kafka me he valido de mqtt que es un protocolo que no es igual que Kafka pero que su sistema de publicación y suscripción sí que es similar por lo tanto cuando necesitas empezar a entrenar a un equipo para que pueda empezar a utilizar Kafka quizá es más sencillo el principio que utilicen mqtt y que se adapten a lo que es el funcionamiento de publicación suscripción que directamente soltar a alguien Kafka que quizá con los conceptos de partición tópico y replicación pues igual se pierden un poco en cualquier caso desacoplar microservicios no es tan complicado como parece pero sí es verdad que necesitas un elemento más y tienes que tenerlo presente así que nada con este vídeo espero haberte ayudado en lo que es Kafka déjame por favor abajo los mensajes si quieres que haga alguna aclaración y si no pues seguiré profundizando en todos estos temas de arquitectura así que nada muchas gracias y nos vemos chau
